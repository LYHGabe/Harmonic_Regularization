{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "Lengths of the first three arguments (x,y,w) must be equal",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-36-bfed02f74067>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     35\u001b[0m \u001b[0;31m#    return np.sin(x) + 0.5 * x\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     36\u001b[0m \u001b[0;31m#y = f(x)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 37\u001b[0;31m \u001b[0mt1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minterpolate\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplrep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     38\u001b[0m \u001b[0mt2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minterpolate\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplrep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/py3_bhl/lib/python3.6/site-packages/scipy/interpolate/fitpack.py\u001b[0m in \u001b[0;36msplrep\u001b[0;34m(x, y, w, xb, xe, k, task, s, t, full_output, per, quiet)\u001b[0m\n\u001b[1;32m    287\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    288\u001b[0m     \"\"\"\n\u001b[0;32m--> 289\u001b[0;31m     \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_impl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplrep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mw\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxe\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtask\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfull_output\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mper\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mquiet\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    290\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    291\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/py3_bhl/lib/python3.6/site-packages/scipy/interpolate/_fitpack_impl.py\u001b[0m in \u001b[0;36msplrep\u001b[0;34m(x, y, w, xb, xe, k, task, s, t, full_output, per, quiet)\u001b[0m\n\u001b[1;32m    456\u001b[0m         \u001b[0;32mraise\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'len(w)=%d is not equal to m=%d'\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mm\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    457\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mm\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mm\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 458\u001b[0;31m         raise TypeError('Lengths of the first three arguments (x,y,w) must '\n\u001b[0m\u001b[1;32m    459\u001b[0m                         'be equal')\n\u001b[1;32m    460\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0mk\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: Lengths of the first three arguments (x,y,w) must be equal"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import scipy\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.interpolate import BSpline\n",
    "import scipy.interpolate as interpolate\n",
    "from scipy import integrate\n",
    "from scipy.misc import derivative\n",
    "def B(x, k, i, t):\n",
    "    if k == 0:\n",
    "        return 1.0 if t[i] <= x < t[i+1] else 0.0\n",
    "    if t[i+k] == t[i]:\n",
    "        c1 = 0.0\n",
    "    else:\n",
    "        c1 = (x - t[i])/(t[i+k] - t[i]) * B(x, k-1, i, t)\n",
    "    if t[i+k+1] == t[i+1]:\n",
    "        c2 = 0.0\n",
    "    else:\n",
    "        c2 = (t[i+k+1] - x)/(t[i+k+1] - t[i+1]) * B(x, k-1, i+1, t)\n",
    "    return c1 + c2\n",
    "def bspline(x, t, c, k):\n",
    "    n = len(t) - k - 1\n",
    "    assert (n >= k+1) and (len(c) >= n)\n",
    "    return sum(c[i] * B(x, k, i, t) for i in range(n))\n",
    "\n",
    "k = 3\n",
    "t = [0, 1, 2, 3, 4, 5, 6,7,8]\n",
    "c = [-1, 2, 0, -1,3,4]\n",
    "\n",
    "tt = np.array([ 0. ,  1,  2,  3,  4 ,  6])\n",
    "x = np.array([ 0. ,  1,  3,  5,  2 ,2,  10])\n",
    "y = np.array([ 0. ,  6.3,  3. ,  4.3,  9.9 ,11,  3.1])\n",
    "ttt = np.linspace(0,6,100)\n",
    "#x = np.linspace(-2 * np.pi, 2 * np.pi, 25)\n",
    "#def f(x):\n",
    "#    return np.sin(x) + 0.5 * x\n",
    "#y = f(x)\n",
    "t1, c1, k1 = interpolate.splrep(tt, x, s=0, k=3)\n",
    "t2, c2, k2 = interpolate.splrep(tt, y, s=0, k=3)\n",
    "\n",
    "spl1 = BSpline(t1, c1, k1)\n",
    "spl2 = BSpline(t2, c2, k2)\n",
    "#spl(2.5)\n",
    "#bspline(2.5, t, c, k)\n",
    "fig, ax = plt.subplots()\n",
    "xx = np.linspace(-7, 7, 50)\n",
    "#ax.plot(xx, [bspline(x, t, c ,k) for x in xx], 'r-', lw=3, label='naive')\n",
    "ax.plot(spl1(ttt), spl2(ttt), 'b-', lw=4, alpha=0.7, label='BSpline')\n",
    "ax.plot(x,y,'.r')\n",
    "ax.grid(True)\n",
    "ax.legend(loc='best')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "quad() got an unexpected keyword argument 'last'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-33-e084c0d17961>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msqrt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mderivative\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mspl\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mdx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1e-10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mintegrate\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mquad\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlast\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m: quad() got an unexpected keyword argument 'last'"
     ]
    }
   ],
   "source": [
    "f = lambda x: spl(x)\n",
    "derivative(f,3,dx=1e-10)\n",
    "def df(x):\n",
    "    return np.sqrt(1+derivative(spl,x,dx=1e-10)**2)\n",
    "df(3)\n",
    "integrate.quad(df,-6,6,last=100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 1.03547637e+01  1.00891789e+01  9.82500465e+00  9.56224104e+00\n",
      "  9.30088805e+00  9.04094569e+00  8.78241395e+00  8.52529284e+00\n",
      "  8.26958235e+00  8.01528249e+00  7.76239325e+00  7.51091463e+00\n",
      "  7.26084664e+00  7.01218928e+00  6.76494254e+00  6.51910642e+00\n",
      "  6.27468093e+00  6.03166606e+00  5.79006181e+00  5.54986820e+00\n",
      "  5.31108520e+00  5.07371283e+00  4.83775108e+00  4.60319996e+00\n",
      "  4.37005947e+00  4.13832959e+00  3.90801035e+00  3.67910172e+00\n",
      "  3.45160372e+00  3.22551635e+00  3.00083960e+00  2.77757347e+00\n",
      "  2.55571797e+00  2.33527310e+00  2.11623884e+00  1.89861522e+00\n",
      "  1.68240221e+00  1.46759983e+00  1.25420808e+00  1.04222695e+00\n",
      "  8.31656446e-01  6.22496565e-01  4.14747309e-01  2.08408677e-01\n",
      "  3.48066957e-03 -2.00036713e-01 -4.02143472e-01 -6.02839606e-01\n",
      " -8.02125115e-01 -1.00000000e+00]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "from scipy import interpolate\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "#x = np.arange(0, 2*np.pi+np.pi/4, 2*np.pi/8)\n",
    "#y = np.sin(x)\n",
    "\n",
    "ctr =np.array( [(1 , 1),(0,30),  (-1, 0)])\n",
    "\n",
    "x=ctr[:,0]\n",
    "y=ctr[:,1]\n",
    "\n",
    "#x=np.append(x,x[0])\n",
    "#y=np.append(y,y[0])\n",
    "\n",
    "tck,u = interpolate.splprep([x,y],k=2,s=0)\n",
    "u=np.linspace(-4,1,num=50,endpoint=True)\n",
    "out = interpolate.splev(u,tck)\n",
    "print(out[0])\n",
    "plt.figure()\n",
    "plt.plot(x, y, 'ro', out[0], out[1], 'b')\n",
    "plt.legend(['Points', 'Interpolated B-spline', 'True'],loc='best')\n",
    "plt.axis([min(x)-1, max(x)+1, min(y)-1, max(y)+1])\n",
    "plt.title('B-Spline interpolation')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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3HHHHbRv354WLVqwdOlSAH766ScuueQSWrZsSadOnVi1atV+uV5//XXOOOMMWrduTefOnfnuu+/44osvmDBhAo8//jitWrViwYIFDBkyhEcffRSADz/8kHbt2tGyZUu6devGzz//DEAwGKRfv360bduW5s2bs2DBgpj87JRKZePHwzff2ObIxYqqqVcAwmHIyYFBg+x/Y7zG5sqVKxk7dixr1qxh/fr1LFq0iNtuu23XjKF5eXn8+OOPDB8+nHfffZcVK1bQpk0bHnvssV3byMjIYOHChVx55ZUA/PLLLyxevJjx48dz/fXXAzB48GBat27NqlWrGDx4cKmf4Dt06MCSJUtYuXIlV155JQ8//DDNmjWjT58+3HnnnXz44YecddZZe31Pz549eeihh1i1ahWnnnoqDz744K7XioqKWLp0KWPHjt3r60qpituyBUaOhHPPjekaLxWSevcBhEJ2WbU9l1eL4Zw8bdu2pWnTpgC0atWKL774gg4dOuz1niVLlrBmzRrOPPNMACKRCIE9Fnm44oor9np/jx49ADvVxNatW9m8eTMLFy5k1qxZAHTs2JFNmzaxZcuWvb5vw4YNXHHFFWzcuJFIJMKxxx5bZvYtW7awefNmOnbsCECvXr32umfh0ksvBSArK2uvu5+VUhU3Zgz89JMtAq6kXgEIBu2yapFIzJdXA6i5xxgun89HUVHRfu8REc455xz+8Y9/lLqN2rVr7/Xc7HNuaIxBZP+lE/Z9X9++fbnrrrvo2rUroVCIIUOGlPcwSrXz2A50XEqp8vn+e3jsMejeHbKy3OVIvS6gQAByc+1kG7m5MV1erSx169bdNWd/u3btWLRo0a6ZQ7dv3866desO+L0vvvgiAAsXLqR+/frUr1+fs88+m2nTpgGwYMECDjvsMOrVq7fX923ZsoUmJdMJPvfcc6Vm2VP9+vVp0KDBrv79qVOn7jobUErFTiIWeymP1DsDANvoJ6jh36l3796cd955HHnkkeTl5TFlyhR69OhBQUEBAMOHD6d58+alfm+DBg1o3749W7duZfLkyQAMGTKE6667jpYtW1KzZs29GvidhgwZQvfu3WnSpAnt2rXbNR31RRddxOWXX85rr7221yplYAtFnz592L59O8cddxzPPvtsLH8MSqW8ja+EqftkiGHnBznxxMS2Q/sREc88srKyZF9r1qzZ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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import scipy.interpolate as spi\n",
    "\n",
    "x = np.linspace(-2 * np.pi, 2 * np.pi, 25)\n",
    "def f(x):\n",
    "    return np.sin(x) + 0.5 * x\n",
    "ipo = spi.splrep(x, f(x), k=1)\n",
    "ipo\n",
    "xx = np.linspace(-1,1,25)\n",
    "iy = spi.splev(x, ipo)\n",
    "plt.plot(x, f(x), 'b', label='f(x)')\n",
    "plt.plot(x, iy, 'r.', label='interpolation')\n",
    "plt.legend(loc=0)\n",
    "plt.grid(True)\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('f(x)')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-3.14159265 -2.37979327 -1.75196847 -1.35619449 -1.2283697  -1.33259571\n",
      " -1.57079633 -1.80899694 -1.91322295 -1.78539816 -1.38962418 -0.76179939\n",
      "  0.          0.76179939  1.38962418  1.78539816  1.91322295  1.80899694\n",
      "  1.57079633  1.33259571  1.2283697   1.35619449  1.75196847  2.37979327\n",
      "  3.14159265]\n"
     ]
    }
   ],
   "source": [
    "print(iy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "py3_bhl",
   "language": "python",
   "name": "py3_bhl"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
